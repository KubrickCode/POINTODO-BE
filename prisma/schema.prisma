generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String            @id @default(uuid()) @db.Uuid 
  defaultBadgeId    Int               @default(0)
  email             String            @unique @db.VarChar(255)
  password          String?           @db.VarChar(255)
  provider          Provider          @default(LOCAL)
  role              Role              @default(USER)
  createdAt         DateTime          @default(now())
  userBadgeLog      UserBadgesLogs[]
  badgeProgress     BadgeProgress[]
  pointsLogs        PointsLogs[]
  taskLogs          TasksLogs[]
  defaultBadge      BadgeTypes        @relation(fields: [defaultBadgeId], references: [id])
}

model BadgeTypes {
  id                Int               @id @db.SmallInt
  name              String            @unique @db.VarChar(20)
  description       String            @db.VarChar(100)
  iconLink          String            @db.VarChar(1000)
  user              User[]
  userBadgeLog      UserBadgesLogs[]
  badgeProgress     BadgeProgress[]
}

model UserBadgesLogs {
  id                Int           @id @default(autoincrement())
  userId            String        @db.Uuid
  badgeId           Int
  user              User          @relation(fields: [userId], references: [id])
  badge             BadgeTypes    @relation(fields: [badgeId], references: [id])
}

model BadgeProgress {
  id                Int           @id @default(autoincrement())
  userId            String        @db.Uuid
  badgeId           Int
  progress          Int           @db.SmallInt @default(0)
  occurredAt        DateTime      @default(now())
  user              User          @relation(fields: [userId], references: [id])
  badge             BadgeTypes    @relation(fields: [badgeId], references: [id])
}

model PointTransactionTypes {
  id                Int             @id @db.SmallInt
  name              String          @unique @db.VarChar(100)
  pointsLogs        PointsLogs[]
}

model PointsLogs {
  id                        Int                     @id @default(autoincrement())
  userId                    String                  @db.Uuid      
  pointTransactionTypesId   Int         
  taskTypesId               Int
  points                    Int                     @db.SmallInt
  occurredAt                DateTime                @default(now())
  user                      User                    @relation(fields: [userId], references: [id])
  pointTransactionTypes     PointTransactionTypes   @relation(fields: [pointTransactionTypesId], references: [id])
  taskTypes                 TaskTypes               @relation(fields: [taskTypesId], references: [id])
}

model TaskTypes {
  id                Int           @id @db.SmallInt
  name              String        @unique @db.VarChar(20)
  taskLogs          TasksLogs[]
  pointLogs         PointsLogs[]
}

model TasksLogs {
  id                Int           @id @default(autoincrement())
  userId            String        @db.Uuid
  taskTypesId       Int
  name              String        @db.VarChar(20)
  description       String?       @db.VarChar(500)
  completion        Int           @db.SmallInt @default(0)
  importance        Int           @db.SmallInt @default(3)
  occurredAt        DateTime      @default(now())
  user              User          @relation(fields: [userId], references: [id])
  taskType          TaskTypes     @relation(fields: [taskTypesId], references: [id])
}

enum Provider {
  LOCAL
  GOOGLE
  KAKAO
}

enum Role {
  USER
  ADMIN
}