generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String                @id @default(uuid()) @db.Uuid 
  selectedBadge       Int                   @default(1)
  email               String                @unique @db.VarChar(255)
  password            String?               @db.VarChar(255)
  provider            Provider              @default(LOCAL)
  role                Role                  @default(USER)
  createdAt           DateTime              @default(now())

  userBadgeLog        UserBadgesLogs[]
  badgeProgress       BadgeProgress[]
  earnedPointsLogs    EarnedPointsLogs[]
  spentPointsLogs     SpentPointsLogs[]
  taskLogs            TasksLogs[]

  selectedBadgeId     Badge            @relation(fields: [selectedBadge], references: [id])
}

model Badge {
  id                Int               @id @default(autoincrement())
  name              String            @unique @db.VarChar(20)
  description       String            @db.VarChar(100)
  price             Int?              @db.Integer               
  iconLink          String            @db.VarChar(1000)
  type              BadgeType
  
  user              User[]
  userBadgeLog      UserBadgesLogs[]
  badgeProgress     BadgeProgress[]
  spentPointLog     SpentPointsLogs[]
}

model UserBadgesLogs {
  id                Int           @id @default(autoincrement())
  userId            String        @db.Uuid
  badgeId           Int
  earnedAt          DateTime      @default(now())

  user              User          @relation(fields: [userId], references: [id])
  badge             Badge         @relation(fields: [badgeId], references: [id])
}

model BadgeProgress {
  id                Int           @id @default(autoincrement())
  userId            String        @db.Uuid
  badgeId           Int
  progress          Int           @db.SmallInt @default(0)
  occurredAt        DateTime      @default(now())

  user              User          @relation(fields: [userId], references: [id])
  badge             Badge         @relation(fields: [badgeId], references: [id])

  @@unique([userId, badgeId])
}

model EarnedPointsLogs {
  id             Int              @id @default(autoincrement())
  userId         String           @db.Uuid      
  taskId         Int
  points         Int              @db.SmallInt
  occurredAt     DateTime         @default(now())

  user           User             @relation(fields: [userId], references: [id])
  taskLog        TasksLogs        @relation(fields: [taskId], references: [id])

  @@index([userId, occurredAt])
}

model SpentPointsLogs {
  id                Int            @id @default(autoincrement())
  userId            String         @db.Uuid      
  badgeId           Int
  points            Int            @db.SmallInt
  occurredAt        DateTime       @default(now())

  user              User           @relation(fields: [userId], references: [id])
  badge             Badge          @relation(fields: [badgeId], references: [id])

  @@index([userId, occurredAt])
}

model TasksLogs {
  id                Int           @id @default(autoincrement())
  userId            String        @db.Uuid
  taskType          TaskType      @default(DAILY)
  name              String        @db.VarChar(20)
  description       String?       @db.VarChar(500)
  completion        Int           @db.SmallInt @default(0)
  importance        Int           @db.SmallInt @default(3)
  occurredAt        DateTime      @default(now())
  version           Int           @db.SmallInt @default(0)

  user              User          @relation(fields: [userId], references: [id])

  pointLog          EarnedPointsLogs[]
  dueDate           TasksDueDate[]

  @@index([userId])
}

model TasksDueDate {
  id            Int           @id @default(autoincrement())
  taskId        Int
  dueDate       String        @db.VarChar(10)

  taskLog       TasksLogs     @relation(fields: [taskId], references: [id])
}

enum Provider {
  LOCAL
  GOOGLE
  KAKAO
}

enum Role {
  USER
  ADMIN
  MASTER
}

enum TaskType {
  DAILY
  DUE
  FREE
}

enum BadgeType {
  NORMAL
  ACHIEVEMENT
  SPECIAL
}